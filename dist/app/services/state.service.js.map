{"version":3,"file":"state.service.js","sourceRoot":"","sources":["state.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,QAAO,SAAS,CAAC,CAAA;AACjB,wBAAwB,cAAc,CAAC,CAAA;AAGvC;IAAA;QAEE,mBAAmB;QACnB,gBAAW,GAAW,CAAC,CAAC;QAExB,aAAa;QACL,sBAAiB,GAAG,IAAI,iBAAO,EAAU,CAAC;QAClD,uBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;IAS7D,CAAC;IAPC,6DAA6D;IAC7D,mDAAmD;IACnD,iCAAU,GAAV,UAAW,KAAK;QACd,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAfH;QAAC,iBAAU,EAAE;;oBAAA;IAiBb,mBAAC;AAAD,CAAC,AAhBD,IAgBC;AAhBY,oBAAY,eAgBxB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport 'rxjs/Rx';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class StateService {\n\n  // status variables\n  currentPage: number = 0;\n\n  // observable\n  private paginationSubject = new Subject<string>();\n  paginationSubject$ = this.paginationSubject.asObservable();\n\n  // This method triggers the observable event in order to tell\n  // all the subscriptors a new page should be loaded\n  changePage(index) {\n    this.currentPage = index;\n    this.paginationSubject.next(index);\n  }\n\n}\n"]}